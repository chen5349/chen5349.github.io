<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Personal Blog</title>
  
  
  <link href="http://chen5349.github.io/atom.xml" rel="self"/>
  
  <link href="http://chen5349.github.io/"/>
  <updated>2021-06-28T14:46:59.417Z</updated>
  <id>http://chen5349.github.io/</id>
  
  <author>
    <name>Wenna Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cloudinary + Hexo</title>
    <link href="http://chen5349.github.io/2021/06/28/picture/"/>
    <id>http://chen5349.github.io/2021/06/28/picture/</id>
    <published>2021-06-28T12:44:52.000Z</published>
    <updated>2021-06-28T14:46:59.417Z</updated>
    
    <content type="html"><![CDATA[<img alt itemprop="image" src="https://res.cloudinary.com/chen5349/image/upload/v1624888727/landscape/wp4815672_ywb8si.jpg" style="display: block;"><p>Try many ways to upload images to hexo, fail in a day’s trials. </p><p>Only url method works. You can use url directly for gravatar and blog.</p> <span id="more"></span><h3 id><a href="#" class="headerlink" title></a></h3><img src="https://res.cloudinary.com/chen5349/image/upload/v1624887862/landscape/30-beautiful-wallpapers-for-long-screen-phones-picture-1-NxU2xsS4c_jgynsi.jpg" style="zoom:100%;">]]></content>
    
    
    <summary type="html">&lt;img alt itemprop=&quot;image&quot; src=&quot;https://res.cloudinary.com/chen5349/image/upload/v1624888727/landscape/wp4815672_ywb8si.jpg&quot; style=&quot;display: block;&quot;&gt;

&lt;p&gt;Try many ways to upload images to hexo, fail in a day’s trials. &lt;/p&gt;
&lt;p&gt;Only url method works. You can use url directly for gravatar and blog.&lt;/p&gt;</summary>
    
    
    
    <category term="visualization" scheme="http://chen5349.github.io/categories/visualization/"/>
    
    
    <category term="hexo" scheme="http://chen5349.github.io/tags/hexo/"/>
    
    <category term="url" scheme="http://chen5349.github.io/tags/url/"/>
    
  </entry>
  
  <entry>
    <title>Visualization - plotly + python</title>
    <link href="http://chen5349.github.io/2021/06/27/Visualization_plotpython/"/>
    <id>http://chen5349.github.io/2021/06/27/Visualization_plotpython/</id>
    <published>2021-06-27T07:55:40.000Z</published>
    <updated>2021-06-29T02:03:14.518Z</updated>
    
    <content type="html"><![CDATA[<p>This post will introduce how to visualize the data on the map with the use of choropleth_mapbox, a mighty tool to realize animation.</p><span id="more"></span><!-- TOC --><h4 id="Step-1-import-all-needed-packages"><a href="#Step-1-import-all-needed-packages" class="headerlink" title="Step 1. import all needed packages"></a>Step 1. import all needed packages</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> chart_studio.plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.tools <span class="keyword">as</span> tls</span><br><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell</span><br><span class="line">InteractiveShell.ast_node_interactivity = <span class="string">&quot;all&quot;</span></span><br></pre></td></tr></table></figure><h4 id="Step-2-import-json-file-from-existing-file"><a href="#Step-2-import-json-file-from-existing-file" class="headerlink" title="Step 2. import json file from existing file"></a>Step 2. import json file from existing file</h4><p>The .json file could be converted from shp. file. I convert it directly by using QGIS.</p><p>More conveniently, you can use package <strong>shapefile</strong> in python to finish the conversion. Check reference for more detail.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;Simplify_GeoJSON_CHNcity.json&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  CHN_cities = json.load(f)</span><br><span class="line"><span class="comment"># below is the alternative to load the json file</span></span><br><span class="line"><span class="comment"># CHN_cities = json.load(open(&quot;GeoJSON_CHNcity.geojson&quot;,&quot;r&quot;))</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># examine the fearue of the json file</span></span><br><span class="line">CHN_cities[<span class="string">&quot;features&quot;</span>][<span class="number">0</span>].keys()</span><br><span class="line">CHN_cities[<span class="string">&quot;features&quot;</span>][<span class="number">0</span>][<span class="string">&quot;properties&quot;</span>]</span><br><span class="line">CHN_cities[<span class="string">&quot;features&quot;</span>][<span class="number">0</span>]    </span><br></pre></td></tr></table></figure><blockquote><p>{‘type’: ‘Feature’,<br> ‘geometry’: {‘type’: ‘Polygon’,<br>  ‘coordinates’: [[[116.12962341, 29.82485008],<br>    [116.27577972, 29.79137039],<br>    [116.4651413, 29.90048981],<br>    [116.54703522, 29.9179039],<br>    [116.58567047, 30.05631828],…</p></blockquote><p>You could find out that the coordinates is in 8 decimal places, which will <strong>inflate the size of the map</strong>. Therefore, we need the following step.</p><h4 id="Step-3-make-the-json-file-smaller"><a href="#Step-3-make-the-json-file-smaller" class="headerlink" title="Step 3. make the json file smaller"></a>Step 3. make the json file smaller</h4><ul><li><p>First, check If you have large GeoJSON files, such as over 20 or 30 MB. The map upload tends to be slow. And normally could not be uploaded to plotly account. </p></li><li><p>The easiest way is to use <a href="https://mapshaper.org/">https://mapshaper.org/</a> to simplify the json file, to make the json file better less than 3MB. You would not lose necessary information because we here care about various coloration across regions.</p></li><li><p>When you have already finish above two steps, your json file is already small enough. To make it even smaller, run following code to shrink it 10% or so. </p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Round off the locations to 2 decimal places (about 1.1 km accuracy)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(CHN_cities[<span class="string">&quot;features&quot;</span>])):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(CHN_cities[<span class="string">&quot;features&quot;</span>][i][<span class="string">&#x27;geometry&#x27;</span>][<span class="string">&#x27;coordinates&#x27;</span>])):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            CHN_cities[<span class="string">&quot;features&quot;</span>][i][<span class="string">&#x27;geometry&#x27;</span>][<span class="string">&#x27;coordinates&#x27;</span>][j] = np.<span class="built_in">round</span>(np.array(CHN_cities[<span class="string">&quot;features&quot;</span>][i][<span class="string">&#x27;geometry&#x27;</span>][<span class="string">&#x27;coordinates&#x27;</span>][j]),<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(i,j)</span><br><span class="line">            </span><br><span class="line"><span class="comment"># If you now check the coordinates again, you’ll see that they have been rounded off to 2 decimal places:</span></span><br><span class="line">CHN_cities[<span class="string">&quot;features&quot;</span>][<span class="number">0</span>][<span class="string">&#x27;geometry&#x27;</span>][<span class="string">&#x27;coordinates&#x27;</span>][<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><blockquote><p>array([116.13,  29.82])</p></blockquote><h4 id="Step-4-Visualization-through-choropleth-mapbox"><a href="#Step-4-Visualization-through-choropleth-mapbox" class="headerlink" title="Step 4. Visualization through choropleth_mapbox"></a>Step 4. Visualization through choropleth_mapbox</h4><ul><li><p>I have already prepared the df_EC for use, detail cleaning process is omitted here. </p></li><li><p>We need to ensure that the dataframe df_EC have <em><strong>the same location “id” as geojson file</strong></em>. </p></li><li><p>Please check the the official websie for setting the parrrameters: <a href="https://plotly.github.io/plotly.py-docs/generated/plotly.express.choropleth_mapbox.html">https://plotly.github.io/plotly.py-docs/generated/plotly.express.choropleth_mapbox.html</a></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fig_Heterogeneity = px.choropleth_mapbox(df_EC, </span><br><span class="line">                    locations = <span class="string">&quot;id&quot;</span>, </span><br><span class="line">                    geojson = CHN_cities, </span><br><span class="line">                    color = <span class="string">&quot;EC&quot;</span>, </span><br><span class="line">                    mapbox_style=<span class="string">&quot;carto-positron&quot;</span>, <span class="comment"># carto-darkmatter&quot;,</span></span><br><span class="line">                    opacity = <span class="number">0.8</span>,color_continuous_midpoint = <span class="number">0</span>,zoom = <span class="number">2.5</span>,</span><br><span class="line">                    color_continuous_scale = px.colors.diverging.balance,</span><br><span class="line">                    labels=&#123;<span class="string">&#x27;EC&#x27;</span>:<span class="string">&#x27;Environmental Heterogeneity&#x27;</span>&#125;,</span><br><span class="line">                    center=&#123;<span class="string">&quot;lat&quot;</span>: <span class="number">38</span>, <span class="string">&quot;lon&quot;</span>: <span class="number">104</span>&#125;,</span><br><span class="line">                     range_color=(-<span class="number">2.5</span>, <span class="number">1.8</span>) )</span><br><span class="line"><span class="comment">#        zoom = 3,   )</span></span><br><span class="line">fig_Heterogeneity.update_layout(margin=&#123;<span class="string">&quot;r&quot;</span>:<span class="number">0</span>,<span class="string">&quot;t&quot;</span>:<span class="number">0</span>,<span class="string">&quot;l&quot;</span>:<span class="number">0</span>,<span class="string">&quot;b&quot;</span>:<span class="number">0</span>&#125;,height = <span class="number">380</span>, width = <span class="number">759</span>)</span><br><span class="line">fig_Heterogeneity.show()</span><br></pre></td></tr></table></figure><p>In the default browser, we get the following image, indicating the environmental complexity across China. </p><div>    <a href="https://plotly.com/~chen5349/31/?share_key=h1E9vkvdUuh6pB7jXfF6ao" target="_blank" title="Environmental Heterogeneity" style="display: block; text-align: center;"><img src="https://plotly.com/~chen5349/31.png?share_key=h1E9vkvdUuh6pB7jXfF6ao" alt="Environmental Heterogeneity" style="max-width: 100%;width: 759px;" width="759" onerror="this.onerror=null;this.src='https://plotly.com/404.png';"></a>    <script data-plotly="chen5349:31" sharekey-plotly="h1E9vkvdUuh6pB7jXfF6ao" src="https://plotly.com/embed.js" async></script></div><h4 id="Step-5-Export-the-image-as-local-html"><a href="#Step-5-Export-the-image-as-local-html" class="headerlink" title="Step 5. Export the image as local html"></a>Step 5. Export the image as local html</h4><p>You might want it.. Even though I don’t think it’s that useful</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.io <span class="keyword">as</span> pio</span><br><span class="line">pio.write_html(fig_Heterogeneity, file=<span class="string">&#x27;figure.html&#x27;</span>, auto_open=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h4 id="Step-6-Save-the-image-on-plotly-account"><a href="#Step-6-Save-the-image-on-plotly-account" class="headerlink" title="Step 6. Save the image on plotly account"></a>Step 6. Save the image on plotly account</h4><ul><li><p>The url in the plotly website can help you disseminate your work. The url can also be used in ppt  with animation. I will introduce the embeddment of it in my future blog.</p></li><li><p>You need to first go the this website for registering account. <a href="https://chart-studio.plotly.com/feed/#/">https://chart-studio.plotly.com/feed/#/</a></p></li><li><p>Installation of Chart Studio in python: <a href="https://plotly.com/python/getting-started-with-chart-studio/">https://plotly.com/python/getting-started-with-chart-studio/</a></p></li><li><p>Then upload the image to your account</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py.plot(fig_Heterogeneity, filename = &#x27;Environmental Heterogeneity&#x27;, auto_open=True)</span><br></pre></td></tr></table></figure><p>It uploads the image online including the data on your plotly account.</p><p>If returned with the following error!! Go back to <strong>step 3</strong> to shrink the size.</p><blockquote><p>“This file is too big! Your current subscription is limited to 524.288 KB uploads. For more information, please visit: <a href="https://plotly.com/get-pricing/.&quot;">https://plotly.com/get-pricing/.&quot;</a></p></blockquote><p>Cheers!🥳</p><p>The following image depicts the environmental dispersion across China. Same steps above can get you this beautiful visualization. </p><div>    <a href="https://plotly.com/~chen5349/33/?share_key=GbkLVug50xwH1jrtw2RWnm" target="_blank" title="Environmental Dispersion" style="display: block; text-align: center;"><img src="https://plotly.com/~chen5349/33.png?share_key=GbkLVug50xwH1jrtw2RWnm" alt="Environmental Dispersion" style="max-width: 100%;width: 759px;" width="759" onerror="this.onerror=null;this.src='https://plotly.com/404.png';"></a>    <script data-plotly="chen5349:33" sharekey-plotly="GbkLVug50xwH1jrtw2RWnm" src="https://plotly.com/embed.js" async></script></div><p><strong>References</strong>: </p><p><a href="https://medium.com/tech-carnot/plotly-mapbox-interactive-choropleth-visualization-tutorial-957dcdbca90b">https://medium.com/tech-carnot/plotly-mapbox-interactive-choropleth-visualization-tutorial-957dcdbca90b</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;This post will introduce how to visualize the data on the map with the use of choropleth_mapbox, a mighty tool to realize animation.&lt;/p&gt;</summary>
    
    
    
    <category term="visualization" scheme="http://chen5349.github.io/categories/visualization/"/>
    
    
    <category term="plotly" scheme="http://chen5349.github.io/tags/plotly/"/>
    
    <category term="python" scheme="http://chen5349.github.io/tags/python/"/>
    
    <category term="External Environment" scheme="http://chen5349.github.io/tags/External-Environment/"/>
    
  </entry>
  
</feed>
